={summary-auth} まとめ

== 各認証処理に関する雑感

今回、４つの認証処理を実装しました。
それぞれの認証方式に対する雑感をまとめます。

=== どの認証方式を利用するか

印象的にGoogleアカウント認証とOAuthProvider認証は難易度が低く、実装しやすいなと感じました。
どちらでも認証できるしくみを用意するのがユーザーには優しそうな反面、一度その認証で作成したアカウントどうしを連携することはできません。@<fn>{note-link-account}
複数の認証方式を採用するのであれば、必ず認証の連携ができるようにするか、最初からしないかを決めて開発するのがよいと感じました。

どちらか一方だけを使うことになるのであれば、実装するサービスやアプリ自体が、対象とするユーザーはどちらのアカウントの登録率が高いか、そのアカウントで認証を行うことに抵抗はなさそうかという部分で適宜判断すればよいと思います。

=== 匿名認証の印象

匿名認証に関して言うと、実装自体は簡単なのですが、永続的に使ってもらうためには、ほかの認証方式への連携するための実装が必要になります。

力を入れたいサービスにおいてユーザー獲得のために導入するのは良さそうですが、そうでもないサービスにも導入するのはコストが高そうに感じました。
team Y.G.E.ではあまりコストに見合わなさそうな印象です。

//footnote[note-link-account][そもそも連携できたところで、アカウトに紐づく各種データをどう連携するかはデベロッパー側が頑張って実装するしかありません。]

=== カスタム認証の扱いについて

検証した結果、あらためてカスタム認証は考えること、やることが多いので、いまのteam Y.G.E.で採用するには少々早いような印象を持ちました。
今後採用するにしても、もう少しサーバ周りの実装方法を納得のいく形で作れるようになる必要がありそうです。

また、ほかの認証方式との連携周りも難易度が高そうな印象がありました。
もし採用するのであれば、ほかの認証方式はいっさいできず、カスタム認証のみでしか認証できない形のサービスを使った方がよさそうです。

== まとめ

 * Googleアカウント認証、OAuthProvider認証は良さそう
 ** どれを使うかは、実装するサービスやアプリから判断する
 ** アカウント連携が行えるかどうかは、最初の実装時点で決める
 ** Twitter認証は実装以上にデベロッパー登録がつらい
 * カスタム認証はまだまだ検証と調査が必要、採用するなら認証方式はこれ単独で
 * 匿名認証は簡単な分、ほかとの認証連携の実装は避けられなさそう、コストをよく考える
